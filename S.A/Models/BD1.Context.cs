//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace S.A.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StarAllianceEntities1 : DbContext
    {
        public StarAllianceEntities1()
            : base("name=StarAllianceEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cancellation> Cancellation { get; set; }
        public virtual DbSet<Det_Ticket> Det_Ticket { get; set; }
        public virtual DbSet<Flight> Flight { get; set; }
        public virtual DbSet<Flight_Class> Flight_Class { get; set; }
        public virtual DbSet<Flight_Destination> Flight_Destination { get; set; }
        public virtual DbSet<Flight_Luggage> Flight_Luggage { get; set; }
        public virtual DbSet<Flight_Origin> Flight_Origin { get; set; }
        public virtual DbSet<Flight_Seats> Flight_Seats { get; set; }
        public virtual DbSet<Flight_Stops> Flight_Stops { get; set; }
        public virtual DbSet<Itinerario> Itinerario { get; set; }
        public virtual DbSet<Passenger> Passenger { get; set; }
        public virtual DbSet<Passport> Passport { get; set; }
        public virtual DbSet<USUARIO> USUARIO { get; set; }
        public virtual DbSet<Visa> Visa { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int ActualizarAsientosReservados(Nullable<int> iD_Flight)
        {
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarAsientosReservados", iD_FlightParameter);
        }
    
        public virtual int LlenarItinerario(Nullable<int> iD_Flight, Nullable<int> iD_Ticket, string airline, string country_Origin, Nullable<System.DateTime> departure_DateTime, string country_Destination, Nullable<System.DateTime> arrival_DateTime, Nullable<int> iD_Flight_Class)
        {
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            var iD_TicketParameter = iD_Ticket.HasValue ?
                new ObjectParameter("ID_Ticket", iD_Ticket) :
                new ObjectParameter("ID_Ticket", typeof(int));
    
            var airlineParameter = airline != null ?
                new ObjectParameter("Airline", airline) :
                new ObjectParameter("Airline", typeof(string));
    
            var country_OriginParameter = country_Origin != null ?
                new ObjectParameter("Country_Origin", country_Origin) :
                new ObjectParameter("Country_Origin", typeof(string));
    
            var departure_DateTimeParameter = departure_DateTime.HasValue ?
                new ObjectParameter("Departure_DateTime", departure_DateTime) :
                new ObjectParameter("Departure_DateTime", typeof(System.DateTime));
    
            var country_DestinationParameter = country_Destination != null ?
                new ObjectParameter("Country_Destination", country_Destination) :
                new ObjectParameter("Country_Destination", typeof(string));
    
            var arrival_DateTimeParameter = arrival_DateTime.HasValue ?
                new ObjectParameter("Arrival_DateTime", arrival_DateTime) :
                new ObjectParameter("Arrival_DateTime", typeof(System.DateTime));
    
            var iD_Flight_ClassParameter = iD_Flight_Class.HasValue ?
                new ObjectParameter("ID_Flight_Class", iD_Flight_Class) :
                new ObjectParameter("ID_Flight_Class", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LlenarItinerario", iD_FlightParameter, iD_TicketParameter, airlineParameter, country_OriginParameter, departure_DateTimeParameter, country_DestinationParameter, arrival_DateTimeParameter, iD_Flight_ClassParameter);
        }
    
        public virtual int RegistrarBoleto(Nullable<int> iD_Flight, Nullable<int> iD_Flight_Class, Nullable<int> iD_Passenger, Nullable<int> iD_Seat, Nullable<System.DateTime> bought_Ticket, Nullable<bool> ticket_Status, Nullable<decimal> total_Price)
        {
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            var iD_Flight_ClassParameter = iD_Flight_Class.HasValue ?
                new ObjectParameter("ID_Flight_Class", iD_Flight_Class) :
                new ObjectParameter("ID_Flight_Class", typeof(int));
    
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var iD_SeatParameter = iD_Seat.HasValue ?
                new ObjectParameter("ID_Seat", iD_Seat) :
                new ObjectParameter("ID_Seat", typeof(int));
    
            var bought_TicketParameter = bought_Ticket.HasValue ?
                new ObjectParameter("Bought_Ticket", bought_Ticket) :
                new ObjectParameter("Bought_Ticket", typeof(System.DateTime));
    
            var ticket_StatusParameter = ticket_Status.HasValue ?
                new ObjectParameter("Ticket_Status", ticket_Status) :
                new ObjectParameter("Ticket_Status", typeof(bool));
    
            var total_PriceParameter = total_Price.HasValue ?
                new ObjectParameter("Total_Price", total_Price) :
                new ObjectParameter("Total_Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarBoleto", iD_FlightParameter, iD_Flight_ClassParameter, iD_PassengerParameter, iD_SeatParameter, bought_TicketParameter, ticket_StatusParameter, total_PriceParameter);
        }
    
        public virtual int RegistrarCancelacion(Nullable<int> iD_Ticket, Nullable<int> iD_Passenger, Nullable<System.DateTime> cancellation_Date, string reason, Nullable<bool> refund)
        {
            var iD_TicketParameter = iD_Ticket.HasValue ?
                new ObjectParameter("ID_Ticket", iD_Ticket) :
                new ObjectParameter("ID_Ticket", typeof(int));
    
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var cancellation_DateParameter = cancellation_Date.HasValue ?
                new ObjectParameter("Cancellation_Date", cancellation_Date) :
                new ObjectParameter("Cancellation_Date", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var refundParameter = refund.HasValue ?
                new ObjectParameter("Refund", refund) :
                new ObjectParameter("Refund", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarCancelacion", iD_TicketParameter, iD_PassengerParameter, cancellation_DateParameter, reasonParameter, refundParameter);
        }
    
        public virtual int RegistrarNumeroAsientos(Nullable<int> iD_Flight, Nullable<int> totalSeats)
        {
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            var totalSeatsParameter = totalSeats.HasValue ?
                new ObjectParameter("TotalSeats", totalSeats) :
                new ObjectParameter("TotalSeats", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarNumeroAsientos", iD_FlightParameter, totalSeatsParameter);
        }
    
        public virtual int RegistrarPasajero(string fst_Nombre, string snd_Nombre, string fst_Apellido, string snd_Apellido, Nullable<System.DateTime> birthdate, string identification, string phone_Number, string adress, string email)
        {
            var fst_NombreParameter = fst_Nombre != null ?
                new ObjectParameter("Fst_Nombre", fst_Nombre) :
                new ObjectParameter("Fst_Nombre", typeof(string));
    
            var snd_NombreParameter = snd_Nombre != null ?
                new ObjectParameter("Snd_Nombre", snd_Nombre) :
                new ObjectParameter("Snd_Nombre", typeof(string));
    
            var fst_ApellidoParameter = fst_Apellido != null ?
                new ObjectParameter("Fst_Apellido", fst_Apellido) :
                new ObjectParameter("Fst_Apellido", typeof(string));
    
            var snd_ApellidoParameter = snd_Apellido != null ?
                new ObjectParameter("Snd_Apellido", snd_Apellido) :
                new ObjectParameter("Snd_Apellido", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(System.DateTime));
    
            var identificationParameter = identification != null ?
                new ObjectParameter("Identification", identification) :
                new ObjectParameter("Identification", typeof(string));
    
            var phone_NumberParameter = phone_Number != null ?
                new ObjectParameter("Phone_Number", phone_Number) :
                new ObjectParameter("Phone_Number", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarPasajero", fst_NombreParameter, snd_NombreParameter, fst_ApellidoParameter, snd_ApellidoParameter, birthdateParameter, identificationParameter, phone_NumberParameter, adressParameter, emailParameter);
        }
    
        public virtual int RegistrarPasaporte(Nullable<int> iD_Passenger, string passport_Type, string country_Code, string passport_Num, string nationality, string gender, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> expiryDate)
        {
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var passport_TypeParameter = passport_Type != null ?
                new ObjectParameter("Passport_Type", passport_Type) :
                new ObjectParameter("Passport_Type", typeof(string));
    
            var country_CodeParameter = country_Code != null ?
                new ObjectParameter("Country_Code", country_Code) :
                new ObjectParameter("Country_Code", typeof(string));
    
            var passport_NumParameter = passport_Num != null ?
                new ObjectParameter("Passport_Num", passport_Num) :
                new ObjectParameter("Passport_Num", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarPasaporte", iD_PassengerParameter, passport_TypeParameter, country_CodeParameter, passport_NumParameter, nationalityParameter, genderParameter, issueDateParameter, expiryDateParameter);
        }
    
        public virtual int RegistrarVisa(Nullable<int> iD_Passport, Nullable<int> iD_Passenger, string issuing_Postname, string control_Number, string visa_Num, string visa_Type, string visa_Class, string entries, string annotation, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> expiryDate)
        {
            var iD_PassportParameter = iD_Passport.HasValue ?
                new ObjectParameter("ID_Passport", iD_Passport) :
                new ObjectParameter("ID_Passport", typeof(int));
    
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var issuing_PostnameParameter = issuing_Postname != null ?
                new ObjectParameter("Issuing_Postname", issuing_Postname) :
                new ObjectParameter("Issuing_Postname", typeof(string));
    
            var control_NumberParameter = control_Number != null ?
                new ObjectParameter("Control_Number", control_Number) :
                new ObjectParameter("Control_Number", typeof(string));
    
            var visa_NumParameter = visa_Num != null ?
                new ObjectParameter("Visa_Num", visa_Num) :
                new ObjectParameter("Visa_Num", typeof(string));
    
            var visa_TypeParameter = visa_Type != null ?
                new ObjectParameter("Visa_Type", visa_Type) :
                new ObjectParameter("Visa_Type", typeof(string));
    
            var visa_ClassParameter = visa_Class != null ?
                new ObjectParameter("Visa_Class", visa_Class) :
                new ObjectParameter("Visa_Class", typeof(string));
    
            var entriesParameter = entries != null ?
                new ObjectParameter("Entries", entries) :
                new ObjectParameter("Entries", typeof(string));
    
            var annotationParameter = annotation != null ?
                new ObjectParameter("Annotation", annotation) :
                new ObjectParameter("Annotation", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarVisa", iD_PassportParameter, iD_PassengerParameter, issuing_PostnameParameter, control_NumberParameter, visa_NumParameter, visa_TypeParameter, visa_ClassParameter, entriesParameter, annotationParameter, issueDateParameter, expiryDateParameter);
        }
    
        public virtual int sp_RegistrarUsuario(string correo, string clave, ObjectParameter registrado, ObjectParameter mensaje)
        {
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarUsuario", correoParameter, claveParameter, registrado, mensaje);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ValidarUsuario(string correo, string clave)
        {
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ValidarUsuario", correoParameter, claveParameter);
        }
    
        public virtual int sp_Verify_Boleto(Nullable<int> iD_Passenger, ObjectParameter mensaje)
        {
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Verify_Boleto", iD_PassengerParameter, mensaje);
        }
    
        public virtual int Baj_DeltFlightDestination(Nullable<int> iD_Destination)
        {
            var iD_DestinationParameter = iD_Destination.HasValue ?
                new ObjectParameter("ID_Destination", iD_Destination) :
                new ObjectParameter("ID_Destination", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Baj_DeltFlightDestination", iD_DestinationParameter);
        }
    
        public virtual int BAJA_FlightOrigin(Nullable<int> iD_Origin)
        {
            var iD_OriginParameter = iD_Origin.HasValue ?
                new ObjectParameter("ID_Origin", iD_Origin) :
                new ObjectParameter("ID_Origin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BAJA_FlightOrigin", iD_OriginParameter);
        }
    
        public virtual int CalculatePassengerRefund(Nullable<int> iD_Passenger, string cancellation_Reason, ObjectParameter refundAmount)
        {
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var cancellation_ReasonParameter = cancellation_Reason != null ?
                new ObjectParameter("Cancellation_Reason", cancellation_Reason) :
                new ObjectParameter("Cancellation_Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculatePassengerRefund", iD_PassengerParameter, cancellation_ReasonParameter, refundAmount);
        }
    
        public virtual int Del_BjaFlightLuggage(Nullable<int> iD_Luggage)
        {
            var iD_LuggageParameter = iD_Luggage.HasValue ?
                new ObjectParameter("ID_Luggage", iD_Luggage) :
                new ObjectParameter("ID_Luggage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Del_BjaFlightLuggage", iD_LuggageParameter);
        }
    
        public virtual int DeleteFlightStop(Nullable<int> iD_FlightStops)
        {
            var iD_FlightStopsParameter = iD_FlightStops.HasValue ?
                new ObjectParameter("ID_FlightStops", iD_FlightStops) :
                new ObjectParameter("ID_FlightStops", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFlightStop", iD_FlightStopsParameter);
        }
    
        public virtual int InsertFlightDestination(Nullable<int> iD_Passenger, string airport, string country, string city, string zipCode, Nullable<decimal> destiny_Price, Nullable<System.DateTime> arrivalDate, Nullable<System.TimeSpan> arrival_Time)
        {
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var airportParameter = airport != null ?
                new ObjectParameter("Airport", airport) :
                new ObjectParameter("Airport", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var destiny_PriceParameter = destiny_Price.HasValue ?
                new ObjectParameter("Destiny_Price", destiny_Price) :
                new ObjectParameter("Destiny_Price", typeof(decimal));
    
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var arrival_TimeParameter = arrival_Time.HasValue ?
                new ObjectParameter("Arrival_Time", arrival_Time) :
                new ObjectParameter("Arrival_Time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFlightDestination", iD_PassengerParameter, airportParameter, countryParameter, cityParameter, zipCodeParameter, destiny_PriceParameter, arrivalDateParameter, arrival_TimeParameter);
        }
    
        public virtual int InsertFlightLuggage(Nullable<int> iD_Passenger, string luggage_Type, Nullable<decimal> luggage_Weight, Nullable<decimal> extra_Luggage, Nullable<decimal> total_Extra)
        {
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var luggage_TypeParameter = luggage_Type != null ?
                new ObjectParameter("Luggage_Type", luggage_Type) :
                new ObjectParameter("Luggage_Type", typeof(string));
    
            var luggage_WeightParameter = luggage_Weight.HasValue ?
                new ObjectParameter("Luggage_Weight", luggage_Weight) :
                new ObjectParameter("Luggage_Weight", typeof(decimal));
    
            var extra_LuggageParameter = extra_Luggage.HasValue ?
                new ObjectParameter("Extra_Luggage", extra_Luggage) :
                new ObjectParameter("Extra_Luggage", typeof(decimal));
    
            var total_ExtraParameter = total_Extra.HasValue ?
                new ObjectParameter("Total_Extra", total_Extra) :
                new ObjectParameter("Total_Extra", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFlightLuggage", iD_PassengerParameter, luggage_TypeParameter, luggage_WeightParameter, extra_LuggageParameter, total_ExtraParameter);
        }
    
        public virtual int InsertFlightOrigin(Nullable<int> iD_Passenger, string airport, string country, string city, string zipCode, string airline, Nullable<System.DateTime> departureDate, Nullable<System.DateTime> departure_Time)
        {
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var airportParameter = airport != null ?
                new ObjectParameter("Airport", airport) :
                new ObjectParameter("Airport", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var airlineParameter = airline != null ?
                new ObjectParameter("Airline", airline) :
                new ObjectParameter("Airline", typeof(string));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            var departure_TimeParameter = departure_Time.HasValue ?
                new ObjectParameter("Departure_Time", departure_Time) :
                new ObjectParameter("Departure_Time", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFlightOrigin", iD_PassengerParameter, airportParameter, countryParameter, cityParameter, zipCodeParameter, airlineParameter, departureDateParameter, departure_TimeParameter);
        }
    
        public virtual int InsertFlightStop(Nullable<int> iD_Passenger, Nullable<bool> transhipment, Nullable<bool> partner_Airline, string airport, Nullable<System.DateTime> stopTime, Nullable<decimal> transhipment_Price, Nullable<decimal> pA_Price)
        {
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var transhipmentParameter = transhipment.HasValue ?
                new ObjectParameter("Transhipment", transhipment) :
                new ObjectParameter("Transhipment", typeof(bool));
    
            var partner_AirlineParameter = partner_Airline.HasValue ?
                new ObjectParameter("Partner_Airline", partner_Airline) :
                new ObjectParameter("Partner_Airline", typeof(bool));
    
            var airportParameter = airport != null ?
                new ObjectParameter("Airport", airport) :
                new ObjectParameter("Airport", typeof(string));
    
            var stopTimeParameter = stopTime.HasValue ?
                new ObjectParameter("StopTime", stopTime) :
                new ObjectParameter("StopTime", typeof(System.DateTime));
    
            var transhipment_PriceParameter = transhipment_Price.HasValue ?
                new ObjectParameter("Transhipment_Price", transhipment_Price) :
                new ObjectParameter("Transhipment_Price", typeof(decimal));
    
            var pA_PriceParameter = pA_Price.HasValue ?
                new ObjectParameter("PA_Price", pA_Price) :
                new ObjectParameter("PA_Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFlightStop", iD_PassengerParameter, transhipmentParameter, partner_AirlineParameter, airportParameter, stopTimeParameter, transhipment_PriceParameter, pA_PriceParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_DeleteCancellation(Nullable<int> iD_Cancellation)
        {
            var iD_CancellationParameter = iD_Cancellation.HasValue ?
                new ObjectParameter("ID_Cancellation", iD_Cancellation) :
                new ObjectParameter("ID_Cancellation", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteCancellation", iD_CancellationParameter);
        }
    
        public virtual int sp_DeleteDetTicket(Nullable<int> iD_Ticket)
        {
            var iD_TicketParameter = iD_Ticket.HasValue ?
                new ObjectParameter("ID_Ticket", iD_Ticket) :
                new ObjectParameter("ID_Ticket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteDetTicket", iD_TicketParameter);
        }
    
        public virtual int sp_DeleteFlightClass(Nullable<int> iD_Flight_Class)
        {
            var iD_Flight_ClassParameter = iD_Flight_Class.HasValue ?
                new ObjectParameter("ID_Flight_Class", iD_Flight_Class) :
                new ObjectParameter("ID_Flight_Class", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteFlightClass", iD_Flight_ClassParameter);
        }
    
        public virtual int sp_DeleteFlightSeat(Nullable<int> iD_Seat)
        {
            var iD_SeatParameter = iD_Seat.HasValue ?
                new ObjectParameter("ID_Seat", iD_Seat) :
                new ObjectParameter("ID_Seat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteFlightSeat", iD_SeatParameter);
        }
    
        public virtual int sp_DeleteItinerary(Nullable<int> iD_Itinerary)
        {
            var iD_ItineraryParameter = iD_Itinerary.HasValue ?
                new ObjectParameter("ID_Itinerary", iD_Itinerary) :
                new ObjectParameter("ID_Itinerary", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteItinerary", iD_ItineraryParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_InsertFlight(Nullable<int> iD_Passenger, Nullable<int> iD_Origin, Nullable<int> iD_Destination, Nullable<int> iD_FlightStops, Nullable<int> iD_Luggage, Nullable<int> totalSeats)
        {
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var iD_OriginParameter = iD_Origin.HasValue ?
                new ObjectParameter("ID_Origin", iD_Origin) :
                new ObjectParameter("ID_Origin", typeof(int));
    
            var iD_DestinationParameter = iD_Destination.HasValue ?
                new ObjectParameter("ID_Destination", iD_Destination) :
                new ObjectParameter("ID_Destination", typeof(int));
    
            var iD_FlightStopsParameter = iD_FlightStops.HasValue ?
                new ObjectParameter("ID_FlightStops", iD_FlightStops) :
                new ObjectParameter("ID_FlightStops", typeof(int));
    
            var iD_LuggageParameter = iD_Luggage.HasValue ?
                new ObjectParameter("ID_Luggage", iD_Luggage) :
                new ObjectParameter("ID_Luggage", typeof(int));
    
            var totalSeatsParameter = totalSeats.HasValue ?
                new ObjectParameter("TotalSeats", totalSeats) :
                new ObjectParameter("TotalSeats", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertFlight", iD_PassengerParameter, iD_OriginParameter, iD_DestinationParameter, iD_FlightStopsParameter, iD_LuggageParameter, totalSeatsParameter);
        }
    
        public virtual int sp_InsertFlightClass(Nullable<int> iD_Flight, Nullable<bool> bussines_Class, Nullable<bool> premium_Class, Nullable<bool> tourist_Class)
        {
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            var bussines_ClassParameter = bussines_Class.HasValue ?
                new ObjectParameter("Bussines_Class", bussines_Class) :
                new ObjectParameter("Bussines_Class", typeof(bool));
    
            var premium_ClassParameter = premium_Class.HasValue ?
                new ObjectParameter("Premium_Class", premium_Class) :
                new ObjectParameter("Premium_Class", typeof(bool));
    
            var tourist_ClassParameter = tourist_Class.HasValue ?
                new ObjectParameter("Tourist_Class", tourist_Class) :
                new ObjectParameter("Tourist_Class", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertFlightClass", iD_FlightParameter, bussines_ClassParameter, premium_ClassParameter, tourist_ClassParameter);
        }
    
        public virtual int sp_InsertFlightSeat(Nullable<int> iD_Flight, string seat_Location, string seat_Number, Nullable<int> assigned_Seats)
        {
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            var seat_LocationParameter = seat_Location != null ?
                new ObjectParameter("Seat_Location", seat_Location) :
                new ObjectParameter("Seat_Location", typeof(string));
    
            var seat_NumberParameter = seat_Number != null ?
                new ObjectParameter("Seat_Number", seat_Number) :
                new ObjectParameter("Seat_Number", typeof(string));
    
            var assigned_SeatsParameter = assigned_Seats.HasValue ?
                new ObjectParameter("Assigned_Seats", assigned_Seats) :
                new ObjectParameter("Assigned_Seats", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertFlightSeat", iD_FlightParameter, seat_LocationParameter, seat_NumberParameter, assigned_SeatsParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_UpdateCancellation(Nullable<int> iD_Cancellation, Nullable<int> iD_Ticket, Nullable<int> iD_Passenger, Nullable<System.DateTime> cancellation_Date, string reason, Nullable<bool> refund)
        {
            var iD_CancellationParameter = iD_Cancellation.HasValue ?
                new ObjectParameter("ID_Cancellation", iD_Cancellation) :
                new ObjectParameter("ID_Cancellation", typeof(int));
    
            var iD_TicketParameter = iD_Ticket.HasValue ?
                new ObjectParameter("ID_Ticket", iD_Ticket) :
                new ObjectParameter("ID_Ticket", typeof(int));
    
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var cancellation_DateParameter = cancellation_Date.HasValue ?
                new ObjectParameter("Cancellation_Date", cancellation_Date) :
                new ObjectParameter("Cancellation_Date", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var refundParameter = refund.HasValue ?
                new ObjectParameter("Refund", refund) :
                new ObjectParameter("Refund", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateCancellation", iD_CancellationParameter, iD_TicketParameter, iD_PassengerParameter, cancellation_DateParameter, reasonParameter, refundParameter);
        }
    
        public virtual int sp_UpdateDetTicket(Nullable<int> iD_Ticket, Nullable<int> iD_Flight, Nullable<int> iD_Flight_Class, Nullable<int> iD_Passenger, Nullable<int> iD_Seat, Nullable<System.DateTime> bought_Ticket, Nullable<bool> ticket_Status, Nullable<decimal> total_Price)
        {
            var iD_TicketParameter = iD_Ticket.HasValue ?
                new ObjectParameter("ID_Ticket", iD_Ticket) :
                new ObjectParameter("ID_Ticket", typeof(int));
    
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            var iD_Flight_ClassParameter = iD_Flight_Class.HasValue ?
                new ObjectParameter("ID_Flight_Class", iD_Flight_Class) :
                new ObjectParameter("ID_Flight_Class", typeof(int));
    
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var iD_SeatParameter = iD_Seat.HasValue ?
                new ObjectParameter("ID_Seat", iD_Seat) :
                new ObjectParameter("ID_Seat", typeof(int));
    
            var bought_TicketParameter = bought_Ticket.HasValue ?
                new ObjectParameter("Bought_Ticket", bought_Ticket) :
                new ObjectParameter("Bought_Ticket", typeof(System.DateTime));
    
            var ticket_StatusParameter = ticket_Status.HasValue ?
                new ObjectParameter("Ticket_Status", ticket_Status) :
                new ObjectParameter("Ticket_Status", typeof(bool));
    
            var total_PriceParameter = total_Price.HasValue ?
                new ObjectParameter("Total_Price", total_Price) :
                new ObjectParameter("Total_Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateDetTicket", iD_TicketParameter, iD_FlightParameter, iD_Flight_ClassParameter, iD_PassengerParameter, iD_SeatParameter, bought_TicketParameter, ticket_StatusParameter, total_PriceParameter);
        }
    
        public virtual int sp_UpdateFlight(Nullable<int> iD_Flight, Nullable<int> iD_Passenger, Nullable<int> iD_Origin, Nullable<int> iD_Destination, Nullable<int> iD_FlightStops, Nullable<int> iD_Luggage, Nullable<int> totalSeats)
        {
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var iD_OriginParameter = iD_Origin.HasValue ?
                new ObjectParameter("ID_Origin", iD_Origin) :
                new ObjectParameter("ID_Origin", typeof(int));
    
            var iD_DestinationParameter = iD_Destination.HasValue ?
                new ObjectParameter("ID_Destination", iD_Destination) :
                new ObjectParameter("ID_Destination", typeof(int));
    
            var iD_FlightStopsParameter = iD_FlightStops.HasValue ?
                new ObjectParameter("ID_FlightStops", iD_FlightStops) :
                new ObjectParameter("ID_FlightStops", typeof(int));
    
            var iD_LuggageParameter = iD_Luggage.HasValue ?
                new ObjectParameter("ID_Luggage", iD_Luggage) :
                new ObjectParameter("ID_Luggage", typeof(int));
    
            var totalSeatsParameter = totalSeats.HasValue ?
                new ObjectParameter("TotalSeats", totalSeats) :
                new ObjectParameter("TotalSeats", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateFlight", iD_FlightParameter, iD_PassengerParameter, iD_OriginParameter, iD_DestinationParameter, iD_FlightStopsParameter, iD_LuggageParameter, totalSeatsParameter);
        }
    
        public virtual int sp_UpdateFlightClass(Nullable<int> iD_Flight_Class, Nullable<int> iD_Flight, Nullable<bool> bussines_Class, Nullable<bool> premium_Class, Nullable<bool> tourist_Class)
        {
            var iD_Flight_ClassParameter = iD_Flight_Class.HasValue ?
                new ObjectParameter("ID_Flight_Class", iD_Flight_Class) :
                new ObjectParameter("ID_Flight_Class", typeof(int));
    
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            var bussines_ClassParameter = bussines_Class.HasValue ?
                new ObjectParameter("Bussines_Class", bussines_Class) :
                new ObjectParameter("Bussines_Class", typeof(bool));
    
            var premium_ClassParameter = premium_Class.HasValue ?
                new ObjectParameter("Premium_Class", premium_Class) :
                new ObjectParameter("Premium_Class", typeof(bool));
    
            var tourist_ClassParameter = tourist_Class.HasValue ?
                new ObjectParameter("Tourist_Class", tourist_Class) :
                new ObjectParameter("Tourist_Class", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateFlightClass", iD_Flight_ClassParameter, iD_FlightParameter, bussines_ClassParameter, premium_ClassParameter, tourist_ClassParameter);
        }
    
        public virtual int sp_UpdateFlightSeat(Nullable<int> iD_Seat, Nullable<int> iD_Flight, string seat_Location, string seat_Number, Nullable<int> assigned_Seats)
        {
            var iD_SeatParameter = iD_Seat.HasValue ?
                new ObjectParameter("ID_Seat", iD_Seat) :
                new ObjectParameter("ID_Seat", typeof(int));
    
            var iD_FlightParameter = iD_Flight.HasValue ?
                new ObjectParameter("ID_Flight", iD_Flight) :
                new ObjectParameter("ID_Flight", typeof(int));
    
            var seat_LocationParameter = seat_Location != null ?
                new ObjectParameter("Seat_Location", seat_Location) :
                new ObjectParameter("Seat_Location", typeof(string));
    
            var seat_NumberParameter = seat_Number != null ?
                new ObjectParameter("Seat_Number", seat_Number) :
                new ObjectParameter("Seat_Number", typeof(string));
    
            var assigned_SeatsParameter = assigned_Seats.HasValue ?
                new ObjectParameter("Assigned_Seats", assigned_Seats) :
                new ObjectParameter("Assigned_Seats", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateFlightSeat", iD_SeatParameter, iD_FlightParameter, seat_LocationParameter, seat_NumberParameter, assigned_SeatsParameter);
        }
    
        public virtual int sp_UpdatePassport(Nullable<int> iD_Passport, Nullable<int> iD_Passenger, string passport_Type, string country_Code, string passport_Num, string nationality, string gender, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> expiryDate)
        {
            var iD_PassportParameter = iD_Passport.HasValue ?
                new ObjectParameter("ID_Passport", iD_Passport) :
                new ObjectParameter("ID_Passport", typeof(int));
    
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var passport_TypeParameter = passport_Type != null ?
                new ObjectParameter("Passport_Type", passport_Type) :
                new ObjectParameter("Passport_Type", typeof(string));
    
            var country_CodeParameter = country_Code != null ?
                new ObjectParameter("Country_Code", country_Code) :
                new ObjectParameter("Country_Code", typeof(string));
    
            var passport_NumParameter = passport_Num != null ?
                new ObjectParameter("Passport_Num", passport_Num) :
                new ObjectParameter("Passport_Num", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePassport", iD_PassportParameter, iD_PassengerParameter, passport_TypeParameter, country_CodeParameter, passport_NumParameter, nationalityParameter, genderParameter, issueDateParameter, expiryDateParameter);
        }
    
        public virtual int sp_UpdateVisa(Nullable<int> iD_Visa, Nullable<int> iD_Passport, Nullable<int> iD_Passenger, string issuing_Postname, string control_Number, string visa_Num, string visa_Type, string visa_Class, string entries, string annotation, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> expiryDate)
        {
            var iD_VisaParameter = iD_Visa.HasValue ?
                new ObjectParameter("ID_Visa", iD_Visa) :
                new ObjectParameter("ID_Visa", typeof(int));
    
            var iD_PassportParameter = iD_Passport.HasValue ?
                new ObjectParameter("ID_Passport", iD_Passport) :
                new ObjectParameter("ID_Passport", typeof(int));
    
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var issuing_PostnameParameter = issuing_Postname != null ?
                new ObjectParameter("Issuing_Postname", issuing_Postname) :
                new ObjectParameter("Issuing_Postname", typeof(string));
    
            var control_NumberParameter = control_Number != null ?
                new ObjectParameter("Control_Number", control_Number) :
                new ObjectParameter("Control_Number", typeof(string));
    
            var visa_NumParameter = visa_Num != null ?
                new ObjectParameter("Visa_Num", visa_Num) :
                new ObjectParameter("Visa_Num", typeof(string));
    
            var visa_TypeParameter = visa_Type != null ?
                new ObjectParameter("Visa_Type", visa_Type) :
                new ObjectParameter("Visa_Type", typeof(string));
    
            var visa_ClassParameter = visa_Class != null ?
                new ObjectParameter("Visa_Class", visa_Class) :
                new ObjectParameter("Visa_Class", typeof(string));
    
            var entriesParameter = entries != null ?
                new ObjectParameter("Entries", entries) :
                new ObjectParameter("Entries", typeof(string));
    
            var annotationParameter = annotation != null ?
                new ObjectParameter("Annotation", annotation) :
                new ObjectParameter("Annotation", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateVisa", iD_VisaParameter, iD_PassportParameter, iD_PassengerParameter, issuing_PostnameParameter, control_NumberParameter, visa_NumParameter, visa_TypeParameter, visa_ClassParameter, entriesParameter, annotationParameter, issueDateParameter, expiryDateParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateFlightDestination(Nullable<int> iD_Destination, string airport, string country, string city, string zipCode, Nullable<decimal> destiny_Price, Nullable<System.DateTime> arrivalDate, Nullable<System.TimeSpan> arrival_Time)
        {
            var iD_DestinationParameter = iD_Destination.HasValue ?
                new ObjectParameter("ID_Destination", iD_Destination) :
                new ObjectParameter("ID_Destination", typeof(int));
    
            var airportParameter = airport != null ?
                new ObjectParameter("Airport", airport) :
                new ObjectParameter("Airport", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var destiny_PriceParameter = destiny_Price.HasValue ?
                new ObjectParameter("Destiny_Price", destiny_Price) :
                new ObjectParameter("Destiny_Price", typeof(decimal));
    
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var arrival_TimeParameter = arrival_Time.HasValue ?
                new ObjectParameter("Arrival_Time", arrival_Time) :
                new ObjectParameter("Arrival_Time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFlightDestination", iD_DestinationParameter, airportParameter, countryParameter, cityParameter, zipCodeParameter, destiny_PriceParameter, arrivalDateParameter, arrival_TimeParameter);
        }
    
        public virtual int UpdateFlightLuggage(Nullable<int> iD_Luggage, string luggage_Type, Nullable<decimal> luggage_Weight, Nullable<decimal> extra_Luggage, Nullable<decimal> total_Extra)
        {
            var iD_LuggageParameter = iD_Luggage.HasValue ?
                new ObjectParameter("ID_Luggage", iD_Luggage) :
                new ObjectParameter("ID_Luggage", typeof(int));
    
            var luggage_TypeParameter = luggage_Type != null ?
                new ObjectParameter("Luggage_Type", luggage_Type) :
                new ObjectParameter("Luggage_Type", typeof(string));
    
            var luggage_WeightParameter = luggage_Weight.HasValue ?
                new ObjectParameter("Luggage_Weight", luggage_Weight) :
                new ObjectParameter("Luggage_Weight", typeof(decimal));
    
            var extra_LuggageParameter = extra_Luggage.HasValue ?
                new ObjectParameter("Extra_Luggage", extra_Luggage) :
                new ObjectParameter("Extra_Luggage", typeof(decimal));
    
            var total_ExtraParameter = total_Extra.HasValue ?
                new ObjectParameter("Total_Extra", total_Extra) :
                new ObjectParameter("Total_Extra", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFlightLuggage", iD_LuggageParameter, luggage_TypeParameter, luggage_WeightParameter, extra_LuggageParameter, total_ExtraParameter);
        }
    
        public virtual int UpdateFlightOrigin(Nullable<int> iD_Origin, string airport, string airline)
        {
            var iD_OriginParameter = iD_Origin.HasValue ?
                new ObjectParameter("ID_Origin", iD_Origin) :
                new ObjectParameter("ID_Origin", typeof(int));
    
            var airportParameter = airport != null ?
                new ObjectParameter("Airport", airport) :
                new ObjectParameter("Airport", typeof(string));
    
            var airlineParameter = airline != null ?
                new ObjectParameter("Airline", airline) :
                new ObjectParameter("Airline", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFlightOrigin", iD_OriginParameter, airportParameter, airlineParameter);
        }
    
        public virtual int UpdateFlightStop(Nullable<int> iD_FlightStops, Nullable<bool> transhipment, Nullable<bool> partner_Airline, string airport, Nullable<System.DateTime> stopTime, Nullable<decimal> transhipment_Price, Nullable<decimal> pA_Price)
        {
            var iD_FlightStopsParameter = iD_FlightStops.HasValue ?
                new ObjectParameter("ID_FlightStops", iD_FlightStops) :
                new ObjectParameter("ID_FlightStops", typeof(int));
    
            var transhipmentParameter = transhipment.HasValue ?
                new ObjectParameter("Transhipment", transhipment) :
                new ObjectParameter("Transhipment", typeof(bool));
    
            var partner_AirlineParameter = partner_Airline.HasValue ?
                new ObjectParameter("Partner_Airline", partner_Airline) :
                new ObjectParameter("Partner_Airline", typeof(bool));
    
            var airportParameter = airport != null ?
                new ObjectParameter("Airport", airport) :
                new ObjectParameter("Airport", typeof(string));
    
            var stopTimeParameter = stopTime.HasValue ?
                new ObjectParameter("StopTime", stopTime) :
                new ObjectParameter("StopTime", typeof(System.DateTime));
    
            var transhipment_PriceParameter = transhipment_Price.HasValue ?
                new ObjectParameter("Transhipment_Price", transhipment_Price) :
                new ObjectParameter("Transhipment_Price", typeof(decimal));
    
            var pA_PriceParameter = pA_Price.HasValue ?
                new ObjectParameter("PA_Price", pA_Price) :
                new ObjectParameter("PA_Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFlightStop", iD_FlightStopsParameter, transhipmentParameter, partner_AirlineParameter, airportParameter, stopTimeParameter, transhipment_PriceParameter, pA_PriceParameter);
        }
    
        public virtual int UpdatePassenger(Nullable<int> iD_Passenger, string phone_Number, string adress, string email)
        {
            var iD_PassengerParameter = iD_Passenger.HasValue ?
                new ObjectParameter("ID_Passenger", iD_Passenger) :
                new ObjectParameter("ID_Passenger", typeof(int));
    
            var phone_NumberParameter = phone_Number != null ?
                new ObjectParameter("Phone_Number", phone_Number) :
                new ObjectParameter("Phone_Number", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassenger", iD_PassengerParameter, phone_NumberParameter, adressParameter, emailParameter);
        }
    
        public virtual int FACTURA_TICKET(Nullable<int> iD_Ticket, Nullable<int> id_class, Nullable<int> id_destination, Nullable<int> iD_STOP, Nullable<int> id_luggage)
        {
            var iD_TicketParameter = iD_Ticket.HasValue ?
                new ObjectParameter("ID_Ticket", iD_Ticket) :
                new ObjectParameter("ID_Ticket", typeof(int));
    
            var id_classParameter = id_class.HasValue ?
                new ObjectParameter("id_class", id_class) :
                new ObjectParameter("id_class", typeof(int));
    
            var id_destinationParameter = id_destination.HasValue ?
                new ObjectParameter("Id_destination", id_destination) :
                new ObjectParameter("Id_destination", typeof(int));
    
            var iD_STOPParameter = iD_STOP.HasValue ?
                new ObjectParameter("ID_STOP", iD_STOP) :
                new ObjectParameter("ID_STOP", typeof(int));
    
            var id_luggageParameter = id_luggage.HasValue ?
                new ObjectParameter("id_luggage", id_luggage) :
                new ObjectParameter("id_luggage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FACTURA_TICKET", iD_TicketParameter, id_classParameter, id_destinationParameter, iD_STOPParameter, id_luggageParameter);
        }
    }
}
